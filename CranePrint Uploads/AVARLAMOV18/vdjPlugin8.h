\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/\r\n\/\/ VirtualDJ\r\n\/\/ Plugin SDK\r\n\/\/ (c)Atomix Productions 2011-2013\r\n\/\/\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/\r\n\/\/ This file defines the basic functions that are used in all plugins.\r\n\/\/ It defines the functions and variables needed to:\r\n\/\/ - load and unload a plugin\r\n\/\/ - give the infos about the plugin (name, picture, etc)\r\n\/\/ - get the parameters automatically saved and restored between loads\r\n\/\/ - interact with VirtualDJ (ask queries or send commands)\r\n\/\/ - implement a custom interface\r\n\/\/\r\n\/\/ Other functions specific to particular types of plugin can be found\r\n\/\/ in their respective header file\r\n\/\/\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n\r\n#ifndef VdjPlugin8H\r\n#define VdjPlugin8H\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Platform specific defines for compatibility Mac\/Windows\r\n#ifdef VDJ_NOEXPORT\r\n#elif (defined(WIN32) || defined(_WIN32) || defined(__WIN32_))\r\n#define WIN32_LEAN_AND_MEAN \/\/For preventing linking errors with DllGetClassObject\r\n#include <windows.h>\r\n#define VDJ_EXPORT\t\t__declspec( dllexport )\r\n#define VDJ_BITMAP\t\tHBITMAP\r\n#define VDJ_HINSTANCE\tHINSTANCE\r\n#define VDJ_WIN\r\n#define VDJ_WINDOW\t\tHWND\r\n#define VDJ_API\t\t\t__stdcall\r\n#elif (defined(__APPLE__) || defined(MACOSX) || defined(__MACOSX__))\r\n#include <CoreFoundation\/CoreFoundation.h>\r\n#define VDJ_EXPORT\t\t__attribute__ ((visibility (\"default\")))\r\n#define VDJ_BITMAP\t\tchar *\r\n#define VDJ_HINSTANCE\tCFBundleRef\r\n#define S_OK            ((HRESULT)0x00000000L)\r\n#define S_FALSE         ((HRESULT)0x00000001L)\r\n#define E_NOTIMPL       ((HRESULT)0x80004001L)\r\n#define CLASS_E_CLASSNOTAVAILABLE -1\r\n#define NO_ERROR\t\t0\r\n#include <MacTypes.h>\r\ntypedef SInt32 HRESULT;\r\ntypedef unsigned long ULONG;\r\ntypedef unsigned int DWORD;\r\n#define VDJ_MAC\r\n\/\/#define VDJ_WINDOW WindowRef\r\n\/\/MACTODO\r\n#define VDJ_WINDOW int\r\n#define VDJ_API\r\n#ifndef GUID_DEFINED\r\n#define GUID_DEFINED\r\ntypedef struct _GUID {\r\nunsigned long Data1;\r\nunsigned short Data2;\r\nunsigned short Data3;\r\nunsigned char Data4[ 8 ];\r\n} GUID;\r\n#endif\r\n#endif\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Internal structures\r\nstruct IVdjCallbacks8\r\n{\r\n\tvirtual HRESULT SendCommand(const char *command)=0;\r\n\tvirtual HRESULT GetInfo(const char *command,double *result)=0;\r\n\tvirtual HRESULT GetStringInfo(const char *command,void *result,int size)=0;\r\n\tvirtual HRESULT DeclareParameter(void *parameter,int type,int id,const char *name,const char *shortName,float defaultvalue)=0;\r\n\tvirtual HRESULT GetSongBuffer(int pos, int nb, short **buffer)=0;\r\n};\r\n\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Standard structures and defines\r\n\r\n\/\/ structure used in plugin identification\r\nstruct TVdjPluginInfo8\r\n{\r\n\tconst char *PluginName;\r\n\tconst char *Author;\r\n\tconst char *Description;\r\n\tconst char *Version;\r\n\tVDJ_BITMAP Bitmap;\r\n\tDWORD Flags;\r\n};\r\n\r\n\/\/ flags used for plugin's parameters\r\n#define VDJPARAM_BUTTON\t0\r\n#define VDJPARAM_SLIDER\t1\r\n#define VDJPARAM_SWITCH\t2\r\n#define VDJPARAM_STRING\t3\r\n#define VDJPARAM_CUSTOM\t4\r\n#define VDJPARAM_RADIO\t5\r\n#define VDJPARAM_COMMAND 6\r\n\r\n#define VDJFLAG_NODOCK 0x1\r\n#define VDJFLAG_PROCESSAFTERSTOP 0x2\r\n#define VDJFLAG_PROCESSFIRST 0x4\r\n#define VDJFLAG_PROCESSLAST  0x8\r\n\r\n\/\/ structure used for custom interfaces\r\n#define VDJINTERFACE_DEFAULT\t0\r\n#define VDJINTERFACE_SKIN\t\t1\r\n#define VDJINTERFACE_DIALOG\t\t2\r\nstruct TVdjPluginInterface8\r\n{\r\n\tDWORD Type;\r\n\t\/\/ xml and image buffers if Type==VDJINTERFACE_SKIN\r\n\tconst char *Xml;\r\n\tvoid *ImageBuffer;\r\n\tint ImageSize;\r\n\t\/\/ HWND returned by CreateDialog or CreateWindow if Type==VDJINTERFACE_DIALOG\r\n\tVDJ_WINDOW hWnd;\r\n};\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Base class\r\n\r\nstruct IVdjCallbacks8;\r\n\r\nclass IVdjPlugin8\r\n{\r\npublic:\r\n\t\/\/ Initialization\r\n\tvirtual HRESULT VDJ_API OnLoad() {return S_OK;}\r\n\tvirtual HRESULT VDJ_API OnGetPluginInfo(TVdjPluginInfo8 *info) {return E_NOTIMPL;}\r\n\tvirtual ULONG VDJ_API Release() {delete this; return S_OK;}\r\n\tvirtual ~IVdjPlugin8() {}\r\n\r\n\t\/\/ call DeclareParameter*() for all your variables during OnLoad()\r\n\t\/\/ if type=VDJPARAM_CUSTOM or VDJPARAM_STRING, parameterSize must be set to sizeof(*parameter)\r\n\tHRESULT DeclareParameterButton(int *parameter, int id, const char *name, const char *shortName) {return cb->DeclareParameter(parameter,VDJPARAM_BUTTON,id,name,shortName,0);}\r\n\tHRESULT DeclareParameterSlider(float *parameter, int id, const char *name, const char *shortName, float defaultvalue) {return cb->DeclareParameter(parameter,VDJPARAM_SLIDER,id,name,shortName,defaultvalue);}\r\n\tHRESULT DeclareParameterSwitch(int *parameter, int id, const char *name, const char *shortName, bool defaultvalue) {return cb->DeclareParameter(parameter,VDJPARAM_SWITCH,id,name,shortName,defaultvalue);}\r\n\tHRESULT DeclareParameterString(char *parameter, int id, const char *name, const char *shortName, int parameterSize) {return cb->DeclareParameter(parameter,VDJPARAM_STRING,id,name,shortName,parameterSize);}\r\n\tHRESULT DeclareParameterCustom(void *parameter, int id, const char *name, const char *shortName, int parameterSize) {return cb->DeclareParameter(parameter,VDJPARAM_CUSTOM,id,name,shortName,parameterSize);}\r\n\tHRESULT DeclareParameterRadio(int *parameter, int id, const char *name, const char *shortName, float defaultvalue) {return cb->DeclareParameter(parameter,VDJPARAM_RADIO,id,name,shortName,defaultvalue);}\r\n\tHRESULT DeclareParameterCommand(char *parameter, int id, const char *name, const char *shortName, int parameterSize) {return cb->DeclareParameter(parameter,VDJPARAM_COMMAND,id,name,shortName,parameterSize);}\r\n\r\n\t\/\/ OnParameter will be called each time a parameter is changed from within VirtualDJ\r\n\tvirtual HRESULT VDJ_API OnParameter(int id) {return S_OK;}\r\n\t\/\/ OnGetParameterString will be called each time the string label of a parameter is requested by VirtualDJ\r\n\tvirtual HRESULT VDJ_API OnGetParameterString(int id, char *outParam, int outParamSize) {return E_NOTIMPL;} ;\r\n\r\n\t\/\/ Custom user-interface\r\n\t\/\/ Fill the HWND or xml\/bitmap info in the passed pluginInterface structure, to define your own plugin window\r\n\tvirtual HRESULT VDJ_API OnGetUserInterface(TVdjPluginInterface8 *pluginInterface) {return E_NOTIMPL;}\r\n\tVDJ_HINSTANCE hInstance;\r\n\r\n\r\n\t\/\/ send a VDJScript command to VirtualDJ\r\n\tHRESULT SendCommand(const char *command) {return cb->SendCommand(command);}\r\n\t\/\/ get info from VirtualDJ (as a value, or as a utf-8 string)\r\n\tHRESULT GetInfo(const char *command, double *result) {return cb->GetInfo(command,result);}\r\n\tHRESULT GetStringInfo(const char *command, char *result, int size) {return cb->GetStringInfo(command,result,size);}\r\n\r\n\r\n\r\n\tIVdjCallbacks8 *cb;\r\n};\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ GUID definitions\r\n\r\n#ifndef VDJCLASS8GUID_DEFINED\r\n#define VDJCLASS8GUID_DEFINED\r\nstatic const GUID CLSID_VdjPlugin8 = { 0xED8A8D87, 0xF4F9, 0x4DCD, { 0xBD, 0x24, 0x29, 0x14, 0x12, 0xE9, 0x3B, 0x60 } };\r\nstatic const GUID IID_IVdjPluginBasic8 = { 0xa1d90ea1, 0x4d0d, 0x42dd, { 0xa4, 0xd0, 0xb8, 0xf3, 0x37, 0xb3, 0x21, 0xf1 } };\r\n#else\r\nextern static const GUID CLSID_VdjPlugin8;\r\nextern static const GUID IID_IVdjPluginBasic8;\r\n#endif\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ DLL export function\r\n\r\n#ifndef NODLLEXPORT\r\n#ifdef __cplusplus\r\nextern \"C\" {\r\n#endif\r\n\tVDJ_EXPORT HRESULT VDJ_API DllGetClassObject(const GUID &rclsid,const GUID &riid,void** ppObject);\r\n#ifdef __cplusplus\r\n}\r\n#endif\r\n#endif\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\r\n#endif\r\n